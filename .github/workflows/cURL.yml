name: Build cURL for Android

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-curl-android:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]
        api_level: [36]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK r29
        run: |
          sdkmanager --install "ndk;29.0.12682434"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/29.0.12682434" >> $GITHUB_ENV
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            autoconf \
            automake \
            libtool \
            pkg-config \
            git \
            perl

      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v4
        with:
          path: openssl-build-${{ matrix.abi }}
          key: openssl-${{ matrix.abi }}-${{ matrix.api_level }}-v1

      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/openssl/openssl.git
          cd openssl
          
          case "${{ matrix.abi }}" in
            armeabi-v7a)
              OPENSSL_TARGET="android-arm"
              ;;
            arm64-v8a)
              OPENSSL_TARGET="android-arm64"
              ;;
            x86)
              OPENSSL_TARGET="android-x86"
              ;;
            x86_64)
              OPENSSL_TARGET="android-x86_64"
              ;;
          esac
          
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          
          ./Configure $OPENSSL_TARGET \
            -D__ANDROID_API__=${{ matrix.api_level }} \
            --prefix=$PWD/../openssl-build-${{ matrix.abi }} \
            no-shared \
            no-tests
          
          make -j$(nproc)
          make install_sw
          cd ..

      - name: Cache nghttp2
        id: cache-nghttp2
        uses: actions/cache@v4
        with:
          path: nghttp2-build-${{ matrix.abi }}
          key: nghttp2-${{ matrix.abi }}-${{ matrix.api_level }}-v1

      - name: Build nghttp2
        if: steps.cache-nghttp2.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/nghttp2/nghttp2.git
          cd nghttp2
          
          case "${{ matrix.abi }}" in
            armeabi-v7a)
              ARCH="armv7a-linux-androideabi"
              ;;
            arm64-v8a)
              ARCH="aarch64-linux-android"
              ;;
            x86)
              ARCH="i686-linux-android"
              ;;
            x86_64)
              ARCH="x86_64-linux-android"
              ;;
          esac
          
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN/bin/${ARCH}${{ matrix.api_level }}-clang
          export CXX=$TOOLCHAIN/bin/${ARCH}${{ matrix.api_level }}-clang++
          export AR=$TOOLCHAIN/bin/llvm-ar
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          
          autoreconf -fi
          ./configure \
            --host=${ARCH} \
            --prefix=$PWD/../nghttp2-build-${{ matrix.abi }} \
            --disable-shared \
            --enable-static \
            --enable-lib-only \
            --disable-python-bindings
          
          make -j$(nproc)
          make install
          cd ..

      - name: Build cURL
        run: |
          git clone --depth 1 https://github.com/curl/curl.git
          cd curl
          
          case "${{ matrix.abi }}" in
            armeabi-v7a)
              ARCH="armv7a-linux-androideabi"
              CMAKE_ARCH="armeabi-v7a"
              ;;
            arm64-v8a)
              ARCH="aarch64-linux-android"
              CMAKE_ARCH="arm64-v8a"
              ;;
            x86)
              ARCH="i686-linux-android"
              CMAKE_ARCH="x86"
              ;;
            x86_64)
              ARCH="x86_64-linux-android"
              CMAKE_ARCH="x86_64"
              ;;
          esac
          
          mkdir build && cd build
          
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$CMAKE_ARCH \
            -DANDROID_PLATFORM=android-${{ matrix.api_level }} \
            -DANDROID_STL=c++_static \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_CURL_EXE=ON \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_STATIC_LIBS=ON \
            -DCURL_USE_OPENSSL=ON \
            -DOPENSSL_ROOT_DIR=$PWD/../../openssl-build-${{ matrix.abi }} \
            -DOPENSSL_INCLUDE_DIR=$PWD/../../openssl-build-${{ matrix.abi }}/include \
            -DOPENSSL_CRYPTO_LIBRARY=$PWD/../../openssl-build-${{ matrix.abi }}/lib/libcrypto.a \
            -DOPENSSL_SSL_LIBRARY=$PWD/../../openssl-build-${{ matrix.abi }}/lib/libssl.a \
            -DUSE_NGHTTP2=ON \
            -DNGHTTP2_INCLUDE_DIR=$PWD/../../nghttp2-build-${{ matrix.abi }}/include \
            -DNGHTTP2_LIBRARY=$PWD/../../nghttp2-build-${{ matrix.abi }}/lib/libnghttp2.a \
            -DCURL_DISABLE_LDAP=ON \
            -DCURL_DISABLE_LDAPS=ON \
            -DCURL_USE_LIBPSL=OFF \
            -DCURL_USE_LIBSSH2=OFF \
            -DCURL_ZLIB=ON \
            -DENABLE_THREADED_RESOLVER=ON \
            -DCURL_CA_BUNDLE=none \
            -DCURL_CA_PATH=none \
            -GNinja
          
          ninja -j$(nproc)
          
          mkdir -p ../../output/${{ matrix.abi }}
          
          cp lib/libcurl.so ../../output/${{ matrix.abi }}/
          
          if [ -f src/curl ]; then
            cp src/curl ../../output/${{ matrix.abi }}/curl
          fi
          
          $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
            ../../output/${{ matrix.abi }}/libcurl.so
          
          if [ -f ../../output/${{ matrix.abi }}/curl ]; then
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
              ../../output/${{ matrix.abi }}/curl
          fi
          
          cd ../..

      - name: Test curl binary
        run: |
          file output/${{ matrix.abi }}/libcurl.so
          ls -lh output/${{ matrix.abi }}/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: curl-android-${{ matrix.abi }}
          path: output/${{ matrix.abi }}/*
          retention-days: 30

  create-release:
    needs: build-curl-android
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release structure
        run: |
          mkdir -p release/lib
          mkdir -p release/bin
          
          for abi in armeabi-v7a arm64-v8a x86 x86_64; do
            mkdir -p release/lib/$abi
            mkdir -p release/bin/$abi
            
            if [ -f artifacts/curl-android-$abi/libcurl.so ]; then
              cp artifacts/curl-android-$abi/libcurl.so release/lib/$abi/
            fi
            
            if [ -f artifacts/curl-android-$abi/curl ]; then
              cp artifacts/curl-android-$abi/curl release/bin/$abi/
              chmod +x release/bin/$abi/curl
            fi
          done
          
          cd release
          tar -czf ../curl-android-all-abis.tar.gz .
          cd ..
      
      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: curl-android-all-abis
          path: curl-android-all-abis.tar.gz
          retention-days: 90
